#include <iostream>
#include "..\MyStaticLib\vector.h" 

// Использование пространства имен для математических операций с векторами
using namespace VectorMath;

int main() {
    // Установка локали для корректного отображения кириллицы
    setlocale(LC_ALL, "RUS");

    try {
        // Создание первого вектора с координатами (3.0, 4.0)
        // Демонстрация создания вектора с помощью списка инициализации
        Vector v1({ 3.0, 4.0 });

        // Создание второго вектора с координатами (1.0, 0.0)
        Vector v2({ 7.0, 7.0 });
        bool result = v2.isHappyVector();
        // Вычисление и вывод длины вектора v1
        // Длина вектора - это квадратный корень из суммы квадратов его компонент
        std::cout << "Длина вектора v1: " << v1.length() << std::endl;

        // Нормализация вектора v1 (приведение к единичной длине)
        v1.normalize();

        // Вывод нормализованного вектора v1
        std::cout << "Нормализованный вектор v1: ";
        for (const auto& value : v1.getData()) {
            std::cout << value << " ";
        }
        std::cout << std::endl;

        // Вычисление скалярного произведения векторов v1 и v2
        // Скалярное произведение - сумма попарных произведений компонент
        double dot_product = v1.dotProduct(v2);
        std::cout << "Скалярное произведение v1 и v2: " << dot_product << std::endl;

        // Вывод данных вектора v2
        std::cout << "Данные вектора v2: ";
        for (const auto& value : v2.getData()) {
            std::cout << value << " ";
        }
        std::cout << std::endl;

    }
    catch (const std::exception& e) {
        // Обработка возможных исключительных ситуаций
        // Например, попытка создать пустой вектор или выполнить операцию с векторами разной длины
        std::cerr << "Ошибка: " << e.what() << std::endl;
    }

    return 0;
}